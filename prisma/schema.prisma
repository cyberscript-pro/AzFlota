// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum State {
  Active
  Inactive
  Blocked
  Expired
}

enum TipoCombustible {
  Diesel
  Especial
  B91
  B83
}

enum Role {
  DIRECTOR //solo lectura
  SUPERVISOR //lectura y escritura, sistema de trazas
  ECONOMICO //lectura y escritura
  ENCARGADO //lectura y escritura
}

model User {
  nickname    String   @unique
  nombre      String
  ci          String   @unique
  password    String
  role        Role     @default(ECONOMICO)
  isAvailable Boolean   @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Chofer {
  nombre      String
  edad        Int
  sexo        String
  ci          String   @unique
  licencia    String
  telefono    String
  vehiculos   Vehiculo[]
  despido     ChoferesDespedidos?
  isAvailable Boolean   @default(true)

  @@map("choferes")
}


model AreaTrabajo {
  uuid         String    @id @default(uuid())
  nombre       String
  centro_costo String
  jefe         String
  isAvailable  Boolean   @default(true)
  vehiculos    Vehiculo[]

  @@map("areas-trabajo")
}

model TarjetaCombustible {
  numero            String            @unique
  pin               String
  estado            State             @default(Active)
  fecha_vencimiento DateTime          @db.Date
  tipo              TipoCombustible
  saldo             Int               @default(0)
  isAvailable       Boolean           @default(true)
  baja              TarjetaCombustibleBaja?
  vehiculo          Vehiculo?

  @@map("tarjetas-combustible")
}

model Vehiculo {
  chapa           String            @unique
  marca           String
  tipo            String
  isAvailable     Boolean           @default(true)
  cargas          ControlCargas[]
  viajes          ViajesVehiculos[]
  mantenimientos  VehiculosMantenimiento[]
  baja            VehiculosBaja?
  consumo_km      Int

  areaTrabajo     AreaTrabajo       @relation(fields: [areaTrabajoUuid], references: [uuid])
  areaTrabajoUuid String
  
  chofer          Chofer?           @relation(fields: [choferCI], references: [ci])
  choferCI      String?
  
  tarjeta          TarjetaCombustible? @relation(fields: [tarjetaNumero], references: [numero])
  tarjetaNumero      String?  @unique

  @@map("vehiculos")
}

model ControlCargas {
  uuid            String            @id @default(uuid())
  folio           String
  comprobante     String
  fecha           DateTime          @db.Date
  existencia      Int               
  importe         Int
  consumo_dinero  Int
  vehiculo        Vehiculo          @relation(fields: [vehiculoChapa], references: [chapa])
  vehiculoChapa   String

  @@map("control-cargas")
}

model TarjetaCombustibleBaja {
  tarjeta        TarjetaCombustible @relation(fields: [tarjetaNumero], references: [numero])
  tarjetaNumero  String            @unique

  @@map("tarjetas-combustible-baja")
}

model ChoferesDespedidos {
  chofer       Chofer          @relation(fields: [choferCI], references: [ci])
  choferCI     String          @unique

  @@map("choferes-despedidos")
}

model VehiculosMantenimiento {
  uuid          String          @id @default(uuid())
  descripcion   String
  inicio        DateTime        @db.Date
  fin           DateTime?        @db.Date

  vehiculo      Vehiculo        @relation(fields: [vehiculoChapa], references: [chapa])
  vehiculoChapa String

  @@map("vehiculos-mantenimiento")
}

model VehiculosBaja {
  vehiculo      Vehiculo         @relation(fields: [vehiculoChapa], references: [chapa])
  vehiculoChapa String           @unique

  @@map("vehiculos-baja")
}

model ViajesVehiculos {
  uuid                   String            @id @default(uuid())
  fechaSalida            DateTime          @db.Date
  fechaLlegada           DateTime          @db.Date 
  lugarDestino           String
  combustibleConsumido   Int

  vehiculo               Vehiculo          @relation(fields: [vehiculoChapa], references: [chapa])
  vehiculoChapa          String

  @@map("viajes-vehiculos")
}